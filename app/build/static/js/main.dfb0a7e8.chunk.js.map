{"version":3,"sources":["views/StartView.js","components/TestAnswer.js","components/DynamicList.js","views/TestView.js","images/images.js","firestore.js","components/SubmitEntryButton.js","views/TextView.js","views/DrawingView.js","components/TestEntry.js","components/Entry.js","components/EntriesReport.js","views/EntriesReportView.js","App.js","serviceWorker.js","index.js","images/FirstImage.png","images/SecondImage.png","images/ThirdImage.png","images/FirstImageShallow.png","images/SecondImageShallow.png","images/ThirdImageShallow.png"],"names":["StartView","testEntry","history","useHistory","formik","useFormik","initialValues","subjectFirstName","subjectLastName","onSubmit","values","setFullName","push","Container","className","Form","Group","controlId","Label","Control","placeholder","onChange","handleChange","Button","variant","type","onClick","handleSubmit","block","TestAnswer","this","image","whatIsIt","whyIsThat","whereIsIt","getImage","getWhatIsIt","getWhyIsThat","getWhereIsIt","DynamicList","items","ListGroup","map","item","index","Item","key","TestView","images","time","testPhase","useState","imageState","setImageState","timerRef","useRef","timerStoppedRef","slideAnswers","resetForm","trim","split","forEach","answer","answerWrapper","setImage","setWhatIsIt","addAnswer","answers","answerWrappers","getAnswers","filter","surveyAnswers","i","length","setWhyIsThat","addSurveysToEntry","textPlaceholder","finish","timerStopped","useCallback","current","reset","start","useEffect","isEmpty","fluid","Row","Col","xs","Figure","Image","src","width","height","ref","initialTime","direction","checkpoints","callback","Minutes","Seconds","Text","as","rows","value","zulligerFirst","zulligerSecond","zulligerThird","shallowImages","shallowFirst","shallowSecond","shallowThird","getImages","phaseNumber","firebase","firestore","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","SubmitEntryButton","isLoading","setLoading","isLoaded","setLoaded","store","collection","add","toJSON","then","buttonText","disabled","TextView","title","question","text","DrawingView","canvasDrawingRef","currentAnswer","setCurrentAnswer","canvasDisabled","setCanvasDisabled","clear","drawImage","addLocationToEntry","location","setWhereIsIt","handleClick","getSaveData","imgSrc","brushRadius","brushColor","lazyRadius","canvasWidth","canvasHeight","ButtonGroup","vertical","undo","TestEntry","subjectName","getSubjectName","getSubjectLastName","entry","Entry","saveData","hideInterface","immediateLoading","EntriesReport","entries","Tab","id","defaultActiveKey","mountOnEnter","unmountOnExit","sm","Nav","Link","eventKey","Content","Pane","EntriesReportView","entriesQueried","setEntriesQueried","setEntries","queryEntries","a","get","query","docs","entryObject","data","answerObject","setAnswers","entriesResult","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.dfb0a7e8.chunk.js","sourcesContent":["import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Container from 'react-bootstrap/Container'\nimport { useHistory } from 'react-router-dom'\nimport { useFormik } from 'formik'\nimport '../styles.css'\n\nexport default function StartView({ testEntry }) {\n  const history = useHistory()\n\n  const formik = useFormik({\n    initialValues: {\n      subjectFirstName: '',\n      subjectLastName: '',\n    },\n    onSubmit: values => {\n      testEntry.setFullName(values.subjectFirstName, values.subjectLastName)\n      history.push('/text0')\n    },\n  })\n\n  return (\n    <Container className='centeredContent'>\n      <h1>Test de Zulliger Online</h1>\n      <h5 className='text-justify'>\n        El test de Zulliger se compone de 3 etapas y en esta aplicación se lo guiará a través de las mismas. Por favor, lea atentamente las instrucciones de cada etapa y asegúrese de comprenderlas antes de comenzar. En caso de ocurrir algún error con su conexión recomendamos que vuelva a esta página y rehaga el test completamente.\n      </h5>\n      <Form>\n        <Form.Group controlId=\"formBasicExplaination\">\n          <Form.Label>\n            Completar con sus datos\n          </Form.Label>\n        </Form.Group>\n\n        <Form.Group controlId=\"subjectFirstName\">\n          <Form.Control \n            placeholder=\"Nombre\" \n            onChange={formik.handleChange}\n          />\n        </Form.Group>\n      \n        <Form.Group controlId=\"subjectLastName\">\n          <Form.Control \n            placeholder=\"Apellido\" \n            onChange={formik.handleChange}\n          />\n        </Form.Group>\n\n        <Button variant=\"primary\" type='submit' onClick={formik.handleSubmit} block>\n          Comenzar\n        </Button>\n      </Form>\n    </Container>\n  )\n}","export default class TestAnswer {\n  constructor() {\n    this.image = ''\n    this.whatIsIt = ''\n    this.whyIsThat = ''\n    this.whereIsIt = ''\n  }\n\n  setImage(image) {\n    this.image = image\n  }\n\n  setWhatIsIt(whatIsIt) {\n    this.whatIsIt = whatIsIt\n  }\n\n  setWhyIsThat(whyIsThat) {\n    this.whyIsThat = whyIsThat\n  }\n\n  setWhereIsIt(whereIsIt) {\n    this.whereIsIt = whereIsIt\n  }\n\n  getImage() {\n    return this.image\n  }\n\n  getWhatIsIt() { \n    return this.whatIsIt\n  }\n\n  getWhyIsThat() {\n    return this.whyIsThat\n  }\n  \n  getWhereIsIt() {\n    return this.whereIsIt\n  }\n\n  toJSON() {\n    var answer = {\n      image: this.getImage(),\n      whatIsIt: this.getWhatIsIt(),\n      whyIsThat: this.getWhyIsThat(),\n      whereIsIt: this.getWhereIsIt()\n    }\n\n    return answer\n  }\n}","import React from 'react'\nimport ListGroup from 'react-bootstrap/ListGroup'\n\nexport default function DynamicList({ items }) {\n  return(\n    <ListGroup>\n      {items.map((item,index) => <ListGroup.Item key={index}>{item.whatIsIt}</ListGroup.Item>)}\n    </ListGroup>\n  )\n}","import React, { useState, useRef, useCallback, useEffect } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Container from 'react-bootstrap/Container'\nimport Figure from 'react-bootstrap/Figure'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Timer from 'react-compound-timer'\nimport { useHistory } from 'react-router-dom'\nimport { useFormik } from 'formik'\nimport TestAnswer from '../components/TestAnswer'\nimport DynamicList from '../components/DynamicList'\nimport '../styles.css'\n\nexport default function TestView({ images, time, testPhase, testEntry }) {\n  const [imageState,setImageState] = useState(0)\n  const timerRef = useRef(null)\n  const timerStoppedRef = useRef(null)\n  const history = useHistory()\n  const formik = useFormik({\n    initialValues: {\n      slideAnswers: '',\n    },\n    onSubmit: (values, { resetForm }) => {\n      switch(testPhase){\n        case 0: \n          addAnswersToEntry(values)\n          break\n        case 1:\n          addSurveysToEntry(values)\n          break\n        default:\n      }\n      resetForm(formik.initialValues)\n      setImageState(imageState + 1)\n    },\n  })\n\n  var textPlaceholder = ''\n  switch(testPhase){\n    case 0: \n      textPlaceholder = '¿Qué podría ser esto?'\n      break\n    case 1:\n      textPlaceholder = '¿Qué hay en la imagen que hace que parezca eso?'\n      break\n    default:\n  }\n\n  function addAnswersToEntry(answers) {\n    answers.slideAnswers.trim().split('\\n').forEach((answer) => {\n      const answerWrapper = new TestAnswer()\n      answerWrapper.setImage(imageState)\n      answerWrapper.setWhatIsIt(answer)\n      testEntry.addAnswer(answerWrapper)\n    })\n  }\n\n  function addSurveysToEntry(answers) {\n    const answerWrappers = testEntry.getAnswers().filter((answer) => answer.getImage() === imageState)\n    const surveyAnswers = answers.slideAnswers.trim().split('\\n')\n    for(var i = 0; i < answerWrappers.length; i++){\n      answerWrappers[i].setWhyIsThat(surveyAnswers[i])\n    }\n  }\n  \n  function finish() {\n    history.push('/text'+ ++testPhase)\n  }\n\n  const timerStopped = useCallback(\n    () => {\n      formik.handleSubmit()\n      if (imageState === images.length - 1) {\n        finish()\n      } else {   \n        timerRef.current.reset()\n        timerRef.current.start()\n      }\n    },\n    [imageState,images.length,finish,formik]\n  )\n\n  useEffect(\n    () => {\n      timerStoppedRef.current = timerStopped\n    },\n    [timerStopped]\n  )\n\n  if(testEntry.isEmpty()){ \n    history.push('/')\n    return null\n  }\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col xs={8}>\n          <Figure.Image\n            src={images[imageState]}\n            width={800}\n            height={600}\n          />\n        </Col>\n        <Col className='answersColumn'>\n          {(testPhase > 0 ) \n            ? <DynamicList \n                items={testEntry.getAnswers().filter((answer) => answer.getImage() === imageState)}\n                imageState={imageState}\n              /> \n            : null}\n          <Timer\n            ref={timerRef}\n            initialTime={time} \n            direction=\"backward\" \n            checkpoints={[\n              {\n                time: 0,\n                callback: () => timerStoppedRef.current()\n              }]}> \n            {({ reset }) => (\n              <Container>\n                <h1>\n                  <Timer.Minutes />m\n                  <Timer.Seconds />s\n                </h1>\n              </Container>\n            )}\n          </Timer>\n        </Col>\n      </Row>\n      \n      <Form>\n        <Form.Row>\n          <Form.Text className='text-muted'>\n            Separar cada respuesta con salto de línea.\n          </Form.Text>\n        </Form.Row>\n        <Form.Row>\n          <Col>\n            <Form.Group controlId=\"slideAnswers\">\n              <Form.Control\n                placeholder={textPlaceholder}\n                as=\"textarea\"\n                rows=\"2\"\n                value={formik.values.slideAnswers}\n                onChange={formik.handleChange}\n              />\n            </Form.Group>\n          </Col>\n        </Form.Row>\n      </Form>\n    </Container>\n  )\n}","import zulligerFirst from './FirstImage.png'\nimport zulligerSecond from './SecondImage.png'\nimport zulligerThird from './ThirdImage.png'\nimport shallowFirst from './FirstImageShallow.png'\nimport shallowSecond from './SecondImageShallow.png'\nimport shallowThird from './ThirdImageShallow.png'\n\nconst images = [zulligerFirst, zulligerSecond, zulligerThird]\nconst shallowImages = [shallowFirst, shallowSecond, shallowThird]\n\nexport default function getImages(phaseNumber) {\n  return (phaseNumber === 2) ? shallowImages : images\n} ","import * as firebase from 'firebase'\nimport 'firebase/firestore';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAOSD8-KDOHsGz94P_fdJKg9-6hG7JJY3g\",\n  authDomain: \"my-first-test-1e6f4.firebaseapp.com\",\n  databaseURL: \"https://my-first-test-1e6f4.firebaseio.com\",\n  projectId: \"my-first-test-1e6f4\",\n  storageBucket: \"my-first-test-1e6f4.appspot.com\",\n  messagingSenderId: \"1062040545280\",\n  appId: \"1:1062040545280:web:fda37d79913a38339110e5\"\n};\n// Initialize Firebase firestore only once\nexport default !firebase.apps.length \n  ? firebase.initializeApp(firebaseConfig).firestore()\n  : firebase.app().firestore();","import React, { useState, useEffect } from 'react'\nimport store from '../firestore'\nimport Button from 'react-bootstrap/Button'\n\nexport default function SubmitEntryButton({ testEntry }) {\n  const [isLoading,setLoading] = useState(false)\n  const [isLoaded,setLoaded] = useState(false)\n  \n  /*async function handleClick() {\n    await store.collection(\"entries\").add(testEntry.toJSON())\n  }*/\n\n  useEffect(() => {\n    if (isLoading) {\n      store.collection(\"entries\").add(testEntry.toJSON()).then(() => {\n        setLoading(false)\n        setLoaded(true)\n      });\n    }\n  }, [isLoading, testEntry]);\n\n  const handleClick = () => setLoading(true)\n  \n  var buttonText = ''\n  if(isLoading) {\n    buttonText = 'Cargando...'\n  } else if (isLoaded) {\n    buttonText = 'Gracias!'\n  } else buttonText = 'Enviar respuestas'\n\n  return (\n    <Button\n      disabled={isLoading || isLoaded}\n      onClick={handleClick}\n    >\n      {buttonText}\n    </Button>\n  )\n}","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button'\nimport { useHistory } from 'react-router-dom'\nimport SubmitEntryButton from '../components/SubmitEntryButton'\nimport '../styles.css'\n\nexport default function TextView({ testEntry, testPhase }) {\n  const history = useHistory()\n\n  function handleClick() {\n    history.push('/test' + testPhase)\n  }\n\n  var title = ''\n  var question = ''\n  var text = ''\n\n  switch(testPhase){\n    case 0:\n      question = '¿Qué podría ser esto?'\n      title = 'Primera Etapa: Respuesta'\n      text = 'En esta etapa se mostraran 3 imágenes y usted contará con 5 minutos (por imagen) para responder a la pregunta \"' + question + '\". Tómese su tiempo, la imagen puede ser considerada total o parcialmente y sepa que la mayoria de las personas otorgan mas de una respuesta.'\n      break\n    case 1:\n      question = '¿Qué es lo que hay en la imagen que hace que parezca eso que usted respondió?'\n      title = 'Segunda Etapa: Encuesta'\n      text = 'En esta etapa se volveran a mostrar las mismas 3 imágenes y usted contará con 10 minutos (por imagen) para responder, por cada una de las respuestas que otorgó previamente, \"' + question + '\". No confundir con dónde está ubicada la respuesta, para eso está la etapa subsiguiente. Nuevamente, tómese su tiempo, estas descripciones son de vital importancia dado que ayudan a la interpretación del test.'\n      break\n    case 2:\n      title = 'Tercera Etapa: Localización'\n      text = 'En esta etapa se mostraran 3 esquemas que representan a las imagenes que antes examinó. Contará con 1 minuto (por imagen) para enmarcar el área en que se encontraba cada respuesta. Las respuestas que usted otorgó apareceran nombradas una a una, a medida que presiona el botón \"Guardar\". En caso de cometer algún error, se le provee con un boton \"Deshacer\" para reintentar del dibujo de la respuesta en curso.'\n      break\n    default:\n  }\n\n  if(testEntry.isEmpty()) {\n    history.push('/')\n    return null\n  }\n  \n  if (testPhase < 3) {\n    return(\n      <Container className='centeredConted'>\n        <h2>{title}</h2>\n        <h5 className='text-justify'>{text}</h5>\n        {(testPhase < 2) ? \n          <h3 className='text-justify'>Por favor recuerde que la pregunta es \"{question}\"</h3> : null\n        }\n        <Button onClick={handleClick}>Comenzar</Button>\n      </Container>\n    )\n  }\n\n  return(\n    <Container>\n      <h2>Muchas gracias por participar!</h2>\n      <h4 className='text-justify'>\n        Por favor, pulse en \"Enviar respuestas\" para concluir con el test.\n      </h4>\n      <SubmitEntryButton testEntry={testEntry}/>\n    </Container>\n  )\n}","import React, { useState, useRef, useCallback, useEffect } from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Timer from 'react-compound-timer'\nimport { useHistory } from 'react-router-dom'\nimport CanvasDraw from 'react-canvas-draw'\nimport DynamicList from '../components/DynamicList'\nimport '../styles.css'\n\nexport default function DrawingView({ images, time, testPhase, testEntry }) {\n  const [imageState, setImageState] = useState(0)\n  const timerRef = useRef(null)\n  const timerStoppedRef = useRef(null)\n  const canvasDrawingRef = useRef(null)\n  const history = useHistory()\n  const answers = testEntry.getAnswers().filter((answer) => answer.getImage() === imageState)\n  const [currentAnswer, setCurrentAnswer] = useState(0)\n  const [canvasDisabled, setCanvasDisabled] = useState(false)\n  \n  function finish() {\n    history.push('/text'+ ++testPhase)\n  }\n\n  const timerStopped = useCallback(\n    () => {\n      if (imageState === images.length - 1) {\n        finish()\n      } else {\n        setCurrentAnswer(0)\n        setImageState(imageState + 1)\n        setCanvasDisabled(false)\n        timerRef.current.reset()\n        canvasDrawingRef.current.clear()\n        canvasDrawingRef.current.drawImage()\n        timerRef.current.start()\n      }\n    },\n    [imageState,setImageState,images.length,finish]\n  )\n  \n\n  const addLocationToEntry = useCallback(\n    (location) => {\n      answers[currentAnswer].setWhereIsIt(location)\n    },\n    [answers,currentAnswer]\n  )\n\n  const handleClick = useCallback(\n    () => {\n      addLocationToEntry(canvasDrawingRef.current.getSaveData())\n      canvasDrawingRef.current.clear()\n      if (currentAnswer < answers.length - 1) {\n        setCurrentAnswer(currentAnswer + 1)\n      } else {\n        setCanvasDisabled(true)\n      }\n    },\n    [canvasDrawingRef,currentAnswer,setCurrentAnswer,answers.length,addLocationToEntry]\n  )\n\n  useEffect(\n    () => {\n      timerStoppedRef.current = timerStopped\n    },\n    [timerStopped]\n  )\n\n  if(testEntry.isEmpty()){ \n    history.push('/')\n    return null\n  }\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col xs={8}>\n          <CanvasDraw \n            ref={canvasDrawingRef} \n            imgSrc={images[imageState]}\n            brushRadius={2}\n            brushColor={'#0000ff'}\n            lazyRadius={10}\n            canvasWidth={800}\n            canvasHeight={600}\n            disabled={canvasDisabled}\n          />\n        </Col>\n        <Col className='answersColumn'>\n          <DynamicList \n            items={answers}\n            imageState={imageState}\n          />\n          <h3>{'Dibujando: ' + answers[currentAnswer].getWhatIsIt()}</h3>\n          <ButtonGroup vertical>\n            <Button\n              onClick={handleClick}\n              disabled={canvasDisabled}\n            >\n              Guardar\n            </Button>\n            <Button\n              onClick={() => canvasDrawingRef.current.undo()}\n              disabled={canvasDisabled}\n            >\n              Deshacer\n            </Button>\n          </ButtonGroup>\n          <Timer\n            ref={timerRef}\n            initialTime={time} \n            direction=\"backward\" \n            checkpoints={[\n              {\n                time: 0,\n                callback: () => timerStoppedRef.current()\n              }]}> \n            {({ reset }) => (\n              <Container>\n                <h1>\n                  <Timer.Minutes />m\n                  <Timer.Seconds />s\n                </h1>\n              </Container>\n            )}\n          </Timer>\n        </Col>\n      </Row>\n    </Container>\n  )\n}","export default class TestEntry {\n  \n  constructor() {\n    this.subjectName = ''\n    this.subjectLastName = ''\n    this.answers = []\n  }\n\n  setFullName(subjectName, subjectLastName) {\n    this.subjectName = subjectName\n    this.subjectLastName = subjectLastName\n  }\n\n  setAnswers(answers){\n    this.answers = answers\n  }\n  \n  addAnswer(answer) {\n    this.answers.push(answer)\n  }\n\n  getAnswers() {\n    return this.answers\n  }\n  \n  getSubjectName() {\n    return this.subjectName\n  }\n\n  getSubjectLastName() {\n    return this.subjectLastName\n  }\n\n  isEmpty() {\n    return (this.getSubjectName() === '' || this.getSubjectLastName() === '')\n  }\n\n  toJSON() {\n    var entry = {\n      subjectName: this.getSubjectName(),\n      subjectLastName: this.getSubjectLastName(),\n      answers: []\n    }\n    this.answers.forEach((answer) => {\n      entry.answers.push(answer.toJSON())\n    })\n    \n    return entry\n  }\n}\n","import React from 'react'\nimport Container from 'react-bootstrap/esm/Container'\nimport CanvasDraw from 'react-canvas-draw'\nimport getImages from '../images/images'\n\nconst images = getImages(0)\n\nexport default function Entry({ testEntry }) {\n  return (\n    <Container>\n      <h2>{'Nombre completo: ' + testEntry.getSubjectName() + ' ' + testEntry.getSubjectLastName()}</h2>\n      <h3>Respuestas</h3>\n      {testEntry.getAnswers().map(\n        (answer, index) => {\n          return (\n            <Container key={index}>\n              <h4>{index + 1 + ': ' + answer.getWhatIsIt()}</h4>\n              <h6 className='text-justify'>{answer.getWhyIsThat()}</h6>\n              <CanvasDraw\n                imgSrc={images[answer.getImage()]}\n                canvasWidth={800}\n                canvasHeight={600}\n                saveData={answer.getWhereIsIt()}\n                hideInterface\n                immediateLoading\n                disabled\n              />\n            </Container>\n          )\n        }\n      )}\n    </Container>\n  )\n}","import React from 'react'\nimport Tab from 'react-bootstrap/Tab'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Nav from 'react-bootstrap/Nav'\nimport Entry from './Entry'\n\nexport default function EntriesReport({ entries }) {\n  return (\n    <Tab.Container id=\"entries-report\" defaultActiveKey='0' mountOnEnter unmountOnExit>\n      <Row>\n        <Col sm={3}>\n          <Nav variant=\"pills\" className=\"flex-column\">\n            {entries.map((entry,index) => {\n              return ( \n                <Nav.Item key={index}>\n                  <Nav.Link eventKey={index}>{entry.getSubjectName() + ' ' + entry.getSubjectLastName()}</Nav.Link>\n                </Nav.Item>\n              )\n            })}\n          </Nav>\n        </Col>\n        <Col sm={7}>\n          <Tab.Content>\n            {entries.map((entry,index) => {\n              return(\n                <Tab.Pane key={index} eventKey={index}>\n                  <Entry testEntry={entry} />\n                </Tab.Pane>\n              )\n            })}\n          </Tab.Content>\n        </Col>\n      </Row>\n    </Tab.Container>\n  )\n}","import React, { useState } from 'react'\nimport store from '../firestore'\nimport TestEntry from '../components/TestEntry'\nimport TestAnswer from '../components/TestAnswer'\nimport EntriesReport from '../components/EntriesReport'\nimport Button from 'react-bootstrap/Button'\nimport '../styles.css'\nimport Container from 'react-bootstrap/esm/Container'\n\nexport default function EntriesReportView() {\n  const [entriesQueried,setEntriesQueried] = useState(false)\n  const [entries,setEntries] = useState([])\n  const [isLoading,setLoading] = useState(false)\n\n  async function queryEntries() {\n    var entries = []\n    var query = await store.collection(\"entries\").get()\n    if(query.docs.length > 0) {\n      query.docs.forEach(entry => {\n        const entryObject = new TestEntry()\n        entryObject.setFullName(entry.data().subjectName, entry.data().subjectLastName)\n        const answers = []\n        entry.data().answers.forEach((answer) => {\n          const answerObject = new TestAnswer()\n          answerObject.setImage(answer.image)\n          answerObject.setWhatIsIt(answer.whatIsIt)\n          answerObject.setWhyIsThat(answer.whyIsThat)\n          answerObject.setWhereIsIt(answer.whereIsIt)\n          answers.push(answerObject)\n        })\n        entryObject.setAnswers(answers)\n        entries.push(entryObject)\n      })\n    }\n    return entries\n  }\n\n  async function handleClick() {\n    setLoading(true)\n    const entriesResult = await queryEntries()\n    if(entriesResult.length > 0){\n      setEntries(entriesResult)\n      setEntriesQueried(true)\n    } else {\n      setLoading(false)\n    }\n  }\n  \n  if(entriesQueried) {\n    return <EntriesReport entries={entries} />\n  } else {\n    return (\n      <Container className='centeredContent'>\n        <h3>Aún no hay respuestas</h3>\n        <Button disabled={isLoading} onClick={handleClick}>\n          {!isLoading ? 'Obtener respuestas' : 'Cargando...'}\n        </Button>\n      </Container>\n    )\n  }\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport StartView from './views/StartView'\nimport TestView from './views/TestView';\nimport getImages from './images/images'\nimport './App.css';\nimport TextView from './views/TextView';\nimport DrawingView from './views/DrawingView';\nimport EntriesReportView from './views/EntriesReportView'\nimport TestEntry from './components/TestEntry'\n\nfunction App() {\n  const entry = new TestEntry()\n  \n  return (\n    <Router>\n      <Switch>\n        <Route path='/text0' exact component={() => <TextView testPhase={0} testEntry={entry}/>} />\n        <Route path='/text1' exact component={() => <TextView testPhase={1} testEntry={entry}/>} />\n        <Route path='/text2' exact component={() => <TextView testPhase={2} testEntry={entry}/>} />\n        <Route path='/text3' exact component={() => <TextView testPhase={3} testEntry={entry}/>} />\n        <Route path='/test0' exact component={() => <TestView images={getImages(0)} time={300000} testPhase={0} testEntry={entry} />} />\n        <Route path='/test1' exact component={() => <TestView images={getImages(1)} time={600000} testPhase={1} testEntry={entry} />} />\n        <Route path='/test2' exact component={() => <DrawingView images={getImages(2)} time={60000} testPhase={2} testEntry={entry} />} />\n        <Route path='/report' exact component={() => <EntriesReportView />} />\n        <Route path='/' exact component={() => <StartView testEntry={entry} />} />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/FirstImage.23f5b2ee.png\";","module.exports = __webpack_public_path__ + \"static/media/SecondImage.7a4430ba.png\";","module.exports = __webpack_public_path__ + \"static/media/ThirdImage.0b2e11a7.png\";","module.exports = __webpack_public_path__ + \"static/media/FirstImageShallow.c700ea7f.png\";","module.exports = __webpack_public_path__ + \"static/media/SecondImageShallow.0ccf61c7.png\";","module.exports = __webpack_public_path__ + \"static/media/ThirdImageShallow.3672244f.png\";"],"sourceRoot":""}